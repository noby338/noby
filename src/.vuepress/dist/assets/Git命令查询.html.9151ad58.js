import{_ as o}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as c,c as r,a as t,d,b as i,e as l,r as a}from"./app.fbd2e910.js";const g={},n={class:"custom-container tip"},m=t("p",{class:"custom-container-title"},"提示",-1),s={href:"https://www.liaoxuefeng.com/wiki/896043488029600",target:"_blank",rel:"noopener noreferrer"},h=l('<table><thead><tr><th>git指令</th><th>作用</th></tr></thead><tbody><tr><td><code>ssh-keygen -t rsa -C [email]</code></td><td>创建SSH Key，位置位于%HomePath%/.ssh目录，其中的<code>id_rsa</code>为私钥，<code>id_rsa.pub</code>为公钥(公钥为github填入的参数)</td></tr><tr><td></td><td></td></tr><tr><td><code>git config --global user.name &quot;noby&quot;</code></td><td>设置全局用户名(其配置的位置位于%HomePath%.gitconfig)(--global表示全局，所有的全局配置将写进%HomePath%.gitconfig)</td></tr><tr><td><code>git config --global user.email &quot;1326981297@qq.com&quot;</code></td><td>设置全局邮箱(其配置的位置位于%HomePath%.gitconfig)</td></tr><tr><td><code>git config --global user.name</code></td><td>显示用户名</td></tr><tr><td><code>git config user.name &quot;noby&quot;</code></td><td>设置局部用户名(当前文件夹)(仓库级别<code>--local</code>(默认不写)，本地配置将写进.git/.gitconfig)</td></tr><tr><td></td><td></td></tr><tr><td><code>git init</code></td><td>获取本地仓库，生成.git文件夹</td></tr><tr><td><code>git status</code></td><td>查看文件的状态<br>Untracked files:表示工作区的该文件不存在暂存区中<br>Changes not staged for commit:表示工作区的该文件与暂存区中的该文件不同<br>Changes to be committed:表示暂存区的文件与本地库的该文件不同<br>nothing to commit, working tree clean:表示工作区、暂存区、本地库的文件都相同<br>Your branch is ahead of <code>[name]/[branch]</code> by 1 commit:表示远程库<code>[name]/[branch]</code>的文件与本地库的该文件不同</td></tr><tr><td><code>git add [file]</code></td><td>将工作区文件添加到暂存区由git管理，开始跟踪（track），被添加到暂存区的文件将会一直在暂存区，除非工作区的该文件删除或者使用<code>git rm --cached [file]</code>删除暂存区的该文件，多次添加同一文件的不同版本只是在这基础上更新</td></tr><tr><td><code>git commit -m [message]</code></td><td>将暂存区提交到本地仓库</td></tr><tr><td></td><td></td></tr><tr><td><code>git diff [file]</code></td><td>查看工作区文件相对于暂存区文件的不同</td></tr><tr><td><code>git diff HEAD -- [file]</code></td><td>查看工作区文件相对于本地库文件的不同</td></tr><tr><td><code>git ls-files -s``git cat-file -p</code></td><td>查看暂存区的文件</td></tr><tr><td><code>git rm --cached [file]</code></td><td>从暂存区删除某文件</td></tr><tr><td><code>git rm [file]</code></td><td>从暂存区和工作区删除某文件</td></tr><tr><td><code>git checkout -- [file]</code></td><td>将工作区的该文件恢复成与暂存区的该文件相同</td></tr><tr><td><code>git checkout [file]</code></td><td>将工作区的该文件恢复成与本地库的该文件相同</td></tr><tr><td><code>git reset HEAD [file]</code></td><td>将暂存区的该文件恢复成与本地库的该文件相同</td></tr><tr><td><code>git log</code></td><td>查看提交日志</td></tr><tr><td><code>git log --pretty=oneline</code></td><td>查看美化的提交日志</td></tr><tr><td><code>git config --global alias.l &#39;log --pretty=oneline --abbrev-commit --all --graph&#39;</code></td><td>设置<code>l</code>命令的git别名为：git log --pretty=oneline --abbrev-commit --all --graph，(--global表示全局，所有的全局配置将写进%HomePath%.gitconfig) (全局级别<code>--global</code> 配置，仓库级别<code>--local</code>(默认不写)、系统级别 <code>--system</code> 亦如此)</td></tr><tr><td>`git config --global -l</td><td>grep alias `</td></tr><tr><td><code>git config --unset --global alias.l</code></td><td>取消<code>l</code>命令的git别名</td></tr><tr><td><code>git reset --hard commitID</code></td><td>目前的本地库版本退回到指定版本库版本（commitID提交日志中查看）(--hard表示将工作区和暂存区的该文件一并退回)</td></tr><tr><td><code>git reset --hard HEAD^</code></td><td>目前的本地库版本退回到上一个版本库版本(HEAD^^表示上2个，HEAD~num表示上num个)</td></tr><tr><td><code>git reflog</code></td><td>查看已经删除的提交记录（版本退回后，之后版本的提交日志会被删除，可以通过该方法查看）</td></tr><tr><td></td><td></td></tr><tr><td><code>.gitignore</code></td><td>文件中输入忽略的文件名或文件夹名（后加/），可以不纳入git的管理，即为在add的阶段忽略该文件或文件夹从工作区添加到暂存区。但.gitignore中的忽略配置将不会删除，已经添加到暂存区的文件或文件夹(可通过<code>git rm --cached [file]</code>删除)</td></tr><tr><td></td><td></td></tr><tr><td><code>git branch</code></td><td>查看分支列表及当前分支</td></tr><tr><td><code>git branch [branch]</code></td><td>新建分支[branch]</td></tr><tr><td><code>git checkout [branch]</code><br><code>git switch [branch]</code></td><td>切换分支<a href="swich%E4%B8%BA%E6%96%B0%E7%9A%84%E6%8C%87%E4%BB%A4">branch</a>。当切换分支的时候，Git 会用[branch]分支的最后提交的快照替换你的工作区和暂存区的内容。当工作区或暂存区相对当前分支有新的内容时存在不可切换和可切换的两种情况。一，当两个分支文件完全相同时，可以切换，并在行底给出M [file] 提示；二，当两个分支的文件不完全相同时，不可以切换，提示需要将工作区和暂存区的文件stash(文件相同不一定commitID相同)</td></tr><tr><td><code>git checkout -b [branch]</code><br><code>git switch -c [branch]</code></td><td>创建并切换分支[branch]</td></tr><tr><td><code>git merge [branch]</code></td><td><strong>合并分支</strong>[branch]到当前分支：将更新当前分支的内容为当前分支和[branch]分支的合并分支，而[branch]分支保持不变。合并的原则是同时保留当前分支和[branch]分支相对历史共同节点的改动部分；若两分支都存在对共同节点的同一部分的改动，则需要执行手动解决冲突，然后add和commit。若两分支不存在对共同节点的同一部分的改动，则git将会执行快速合并，并自动add和commmit<br><strong>快速合并</strong>:若两分支不存在对共同节点的同一部分的改动，将执行快速合并，且[branch]上相对共同节点的修改部分将代替当前分支的对应部分<br><strong>解决冲突</strong>:当两分支都存在对共同节点的同一部分的改动则需要手动解决冲突，git会将两个分支的冲突部分汇总到工作区的该文件中，修改工作区文件解决掉冲突后还需add和commit到当前分支，至此当前分支的冲突解决完成，</td></tr><tr><td><code>git merge --no-ff [branch]</code></td><td>使用非快速合并自动合并，需要输入commit消息</td></tr><tr><td><code>git log --graph</code></td><td>查看分支合并图</td></tr><tr><td><code>git merge --abort</code></td><td>解决合并冲突的过程中取消合并分支</td></tr><tr><td><code>git branch -d [branch]</code></td><td>删除分支[branch]</td></tr><tr><td><code>git stash</code></td><td>储藏目前分支的暂存区和工作区的工作现场</td></tr><tr><td><code>git stash list</code></td><td>查看工作现场</td></tr><tr><td><code>git stash apply [stash]</code></td><td>恢复工作现场到当前分支(不会删除储藏的该工作现场)(非当前分支的工作现场也可也恢复到当前分支)</td></tr><tr><td><code>git stash drop [stash]</code></td><td>删除工作现场</td></tr><tr><td><code>git stash pop</code></td><td>恢复工作现场到当前分支，同时删除储藏的该工作现场(非当前分支的工作现场也可也恢复到当前分支)</td></tr><tr><td><code>git cherry-pick [commit]</code></td><td>当两个分支来自同一个节点时，可复制一个分支commit到当前分支(对当前分支做同样的commit)</td></tr><tr><td><code>git tag [name]</code></td><td>标记在当前分支当前点标签</td></tr><tr><td><code>git tag [name] [commitID]</code></td><td>在指定commitID打标签</td></tr><tr><td><code>git tag</code></td><td>查看标记的所有标签(标签不是按时间顺序列出，而是按字母排序的。)</td></tr><tr><td><code>git tag -a [tagname] -m [message]</code></td><td>书写标签详情</td></tr><tr><td><code>git show [tagname]</code></td><td>查看标签信息</td></tr><tr><td><code>git tag -d [tagname]</code></td><td>删除指定标签</td></tr><tr><td><code>git push [name] [tagname]</code></td><td>推送[tagname]标签到[name]远程库(默认未指定推送标签是不会把标签推送到远程)</td></tr><tr><td><code>git push [name] --tags</code></td><td>推送所有标签到[name]远程库</td></tr><tr><td><code>git push [name] :refs/tags/[tagname]</code></td><td>删除[name]远程的[tagname]标签(前提是删除本地的[tagname]标签)</td></tr><tr><td>---</td><td>---</td></tr><tr><td><code>git remote</code></td><td>查看远程库列表</td></tr><tr><td><code>git remote -v</code></td><td>当前远程库的信息</td></tr><tr><td><code>git remote add [name] [url]</code></td><td>添加远程库[name]为远程库的名，一般为origin。[url]为远程库的地址([name]为本地库为方便关联远程库的url而存在的，使用[name]为了在本地使用别名操作该url)</td></tr><tr><td><code>git remote rm [name]</code></td><td>解除本地库和远程库[name]的关系，并不是物理上删除了远程库</td></tr><tr><td><code>git push (-u) [name] [branch]</code></td><td>将本地库的当前分支推送到[name]远程库的[branch]分支，并且将会在远程库自动合并当前分支到[name]/[branch]分支。(-u表示将远程分支[name]/[branch]与当前分支关联)</td></tr><tr><td><code>git push [name] [branch] -f</code></td><td>强制推送到远程仓库(一般为将远程某分支的版本回退)</td></tr><tr><td><code>git push --all [name] -f </code></td><td>将本地的所有分支强制推送到远程(一般为远程库的第一次初始化)</td></tr><tr><td><code>git pull</code></td><td>将远程分支的对应当前分支拉取到工作区(前提是已经关联当前分支到远程分支)，同时合并(满足快速合并会执行快速合并)</td></tr><tr><td><code>git fetch</code></td><td>从远程获取最新版本到远程仓库副本，同pull的区别在于fetch不会自动merge. 而git pull是从远程获取最新版本并merge到本地仓库. 从安全角度出发，git fetch比git pull更安全，因为我们可以先比较本地与远程的区别后，选择性的合并。通常用于查看其他人正在处理的内容进度<br><code>git pull</code> = <code>git fetch</code> + <code>git merge</code></td></tr><tr><td><code>git clone [url]</code></td><td>克隆远程的url项目，到当前的路径，注意会在操作git的目录下创建远程项目相同的项目目录</td></tr><tr><td><code>git branch --set-upstream-to=[name]/[branch] [branch]</code></td><td>将远程分支与本地分支关联</td></tr><tr><td><code>git branch -vv</code></td><td>查看本地和远程关联的分支</td></tr><tr><td><code>git rebase</code></td><td>rebase操作可以把本地未push的分叉提交历史整理成直线<br>在push某本地分支到远程分支之前，该远程分支若有改变，应先pull到本地merge，再push到远程让github自动合并。但这样做会在本地新建一条用于存放pull下来的分支，该分支用于和本地分支merge。该多余的分支rebase命令优化。优化的原理把merge的过程调整到本地分支的改动之前，这样便不必创建新的分支</td></tr></tbody></table><ul><li>由git管理的项目目录为 <ul><li>.git文件夹 <ul><li>本地仓库(版本库)(Repository) <ul><li>指针 <ul><li>HEAD</li></ul></li><li>分支 <ul><li>master分支 <ul><li>commit时间线 <ul><li>commitID3(HEAD指向的)</li><li>commitID2</li><li>commitID1</li></ul></li></ul></li><li>A分支 <ul><li>commit时间线</li></ul></li></ul></li></ul></li><li>暂存区(Stage、index)</li></ul></li><li>工作区(working tree)</li><li>远程仓库(remote) <ul><li>分支 <ul><li>master分支 <ul><li>commit时间线 <ul><li>commitID3</li><li>commitID2</li><li>commitID1</li></ul></li></ul></li><li>A分支 <ul><li>commit时间线</li></ul></li></ul></li></ul></li></ul></li></ul><p><img src="https://markdown-1308523627.cos.ap-chengdu.myqcloud.com/typora/image-20221103132542796.png" alt="image-20221103132542796"><img src="https://markdown-1308523627.cos.ap-chengdu.myqcloud.com/typora/image-20221104222117421.png" alt="image-20221104222117421"></p><div class="custom-container warning"><p class="custom-container-title">注意</p><ul><li>当本地仓库的版本低于远程仓库的版本时，应该先拉取远程仓库的版本，再推送本地版本</li><li>退出 vim 编辑器 :q <kbd>enter</kbd></li><li>任何文件的增删改（包括合并分支）都是在本地仓库进行，然后在推送到远程仓库</li><li>新建项目没配置gitignore文件，导致node_modules文件上传到了git仓库。.gitignore文件为忽略还未从工作区添加到暂存区的文件，对于已经推送到远程仓库的node_modules，暂存区中已经存在，直接在.gitignore文件中写入该node_modules并不会删除暂存区中的node_modules，因此需要使用命令删除暂存区中的node_modules.下面是解决方法，可以删除仓库已上传的node_modules文件： <ul><li><code>git rm -r --cached node_modules</code></li><li><code>git commit -m &#39;delete node_modules file&#39;</code></li><li><code>git push origin master</code></li></ul></li></ul></div>',4);function u(b,p){const e=a("ExternalLinkIcon");return c(),r("div",null,[t("div",n,[m,t("p",null,[d("本文为git的常用命令的查询。若对git的基础概念不理解，可学习 "),t("a",s,[d("廖雪峰git教程"),i(e)])])]),h])}const k=o(g,[["render",u],["__file","Git命令查询.html.vue"]]);export{k as default};
