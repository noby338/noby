import{_ as l}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as i,c as e,e as s}from"./app.b62a36f4.js";const a={},d=s(`<h3 id="redis的安装" tabindex="-1"><a class="header-anchor" href="#redis的安装" aria-hidden="true">#</a> redis的安装</h3><ul><li><p>使用压缩包安装</p><ol><li>解压到/usr/local/src/redis</li><li>根据已经存在的makefile执行安装命令: <code>make install PREFIX=/usr/local/redis</code>。安装到指定目录</li></ol></li><li><p>可执行文件位置为bin</p></li><li><p>配置文件位于conf</p><ul><li><p>该配置文件来自于安装解压包中的redis.conf文件</p></li><li><p>配置文件的配置</p><div class="language-conf line-numbers-mode" data-ext="conf"><pre class="language-conf"><code>#模块化配置，使用该处的公共配置文件(来自解压包的复制)，与该处不同的配置写入当前的个性文件
include /usr/local/redis/conf/redis.conf
#ip为所有的ip均可访问，默认配置文件中的bind 127.0.0.1 -::1表示只允许本机访问
bind 0.0.0.0 -::1
port 6379
requirepass 123
#使用后台守护式启动
daemonize yes
#日志名
logfile &quot;6379.log&quot;
#日志及数据持久化文件位置
dir /usr/local/redis/data
#启动redis以后存储当前进程进程编号的信息文件
pidfile /var/run/redis_6379.pid

#rdb数据持久化文件名
dbfilename dump-6379.rdb
#设置rdb持久化存储至本地数据库时是否压缩数据，默认为 yes，采用 LZF 压缩，
rdbcompression yes
#设置是否进行RDB文件格式校验，该校验过程在写文件和读文件过程均进行，默认为yes
rdbchecksum yes
#rdb持久化自动执行的条件，60秒之内有20个数据发生变化(增删改)将执行持久化
save 60 20

#开启AOF持久化
appendonly yes
#AOF持久化文件名
appendfilename appendonly-6379.aof
#设置AOF持久化的周期为每秒appendfsync always|everysec|no
appendfsync everysec
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>log日志与持久化文件(dump.rdb/appendonly.aof)位于data</p></li></ul><h3 id="redis的持久化" tabindex="-1"><a class="header-anchor" href="#redis的持久化" aria-hidden="true">#</a> Redis的持久化</h3><ul><li><p>RDB（redis database）快照：将当前数据状态进行保存，快照形式，存储数据结果，存储格式简单，关注点在数据</p><ul><li><p>执行的时机</p><ul><li>持久化执行时机为使用持久化指令，或者关闭redis之前(正常关闭redis，意外关机、宕机不可以)</li><li>数据的恢复执行实际为启动redis时</li></ul></li><li><p>通过指令命令redis执行</p><ul><li><p>两种指令</p><ul><li>save <ul><li>save指令的执行会阻塞当前Redis服务器，直到当前RDB过程完成为止，有可能会造成长时间阻塞，线上环境不建议使用。</li></ul></li><li>bgsave <ul><li>bgsave命令是针对save阻塞问题做的优化。Redis内部所有涉及到RDB操作都建议采用bgsa ve的方式，save命令可以放弃使用。</li></ul></li></ul></li><li><p>两种指令的区别</p><table><thead><tr><th>方式</th><th>save指令</th><th>bgsave指令(save配置)</th></tr></thead><tbody><tr><td>读写</td><td>同步</td><td>异步</td></tr><tr><td>阻塞客户端的指令</td><td>是</td><td>否</td></tr><tr><td>额外的内存消耗</td><td>否</td><td>是</td></tr><tr><td>启动新进程</td><td>否</td><td>是</td></tr></tbody></table></li></ul></li><li><p>配置方式Redis自动执行</p><ul><li>在配置server的配置文件中指定 save second changes 即可使 redis 自动持久化，在second时间内改变changes次即自动执行bgsave操作</li></ul></li><li><p>RDB的优缺点</p><ul><li>RDB优点 <ul><li>RDB是一个紧凑压缩的二进制文件，存储效率较高</li><li>RDB内部存储的是rdis在某个时间点的数据快照，非常适合用于数据备份，全量复制等场景</li><li>RDB恢复数据的速度要比AOF快很多</li></ul></li><li>Rdb缺点 <ul><li>RDB方式无论是执行指令还是利用配置，无法做到实时持久化，具有较大的可能性丢失数据</li><li>bgsave指令每次运行要执行fork操作创建子进程，要牺牲掉一些性能</li><li>Redis的众多版本中未进行RDB文件格式的版本统一，有可能出现各版本服务之间数据格式无法兼容现象</li></ul></li></ul></li><li><p>应用：服务器中每X小时执行bgsave备份，并将RDB文件拷贝到远程机器中，用于灾难恢复。</p></li></ul></li><li><p>AOF(append only file)日志：将数据的操作过程进行保存，日志形式，存储操作过程，存储格式复杂，关注点在数据的操作过程</p><ul><li>配置方式Redis自动执行 <ul><li>在配置server的配置文件中指定 appendonly yes|no 即可开启或关闭AOF，配置appendfsync always|everysec|no即可指定执行的周期 <ul><li>always：每次写入操作均同步到AOF文件中，数据零误差，性能较低，不建议使用。</li><li>everysec：每秒将缓冲区中的指令同步到AO「文件中，数据准确性较高，性能较高，建议使用，也是默认配置</li><li>no：由操作系统控制每次同步到AOF文件的周期，整体过程不可控</li></ul></li></ul></li><li>AOF的重写操作 <ul><li>定义：AOF记录的为所有的操作流程，但是存在部分流程不需要记录的场景，例如：set name noby，set name kace，AOF其实只需记录最后一个set即可，简单说就是将对同一个数据的若干个条命令执行结果转化成最终结果数据对应的指令进行记录。这种方式叫做AOF的重写</li><li>作用 <ul><li>降低磁盘占用量，提高磁盘利用率</li><li>提高持久化效率，降低持久化写时间，提高IO性能</li><li>降低数据恢复用时，提高数据恢复效率</li></ul></li><li>重写的策略 <ul><li>进程内已超时的数据不再写入文件</li><li>忽略无效指令，重写时使用进程内数据直接生成，这样新的AOF文件只保留最终数据的写入命令</li><li>对同一数据的多条写命令合并为一条命令</li></ul></li><li>重写的方式 <ul><li>手动重写 <ul><li>指令 <ul><li>bgrewriteaof</li></ul></li></ul></li><li>自动重写 <ul><li>指令 <ul><li>auto-aof-rewrite-min-size size</li><li>auto-aof-rewrite-percentage percentage</li></ul></li><li>自动重写触发条件设置 <ul><li>auto-aof-rewrite-min-size size</li><li>auto-aof-rewrite-percentage percent</li></ul></li><li>自动重写触发比对参数（运行指令info Persistence获取具体信息） <ul><li>aof_current_size</li><li>aof_base_size</li></ul></li><li>自动重写触发条件 <ul><li>aof_current_size&gt;auto-aof-rewrite-min-size</li><li>aof_current_size-aof_base_size/aof_base_size=auto-aof-rewrite-percentage</li></ul></li></ul></li></ul></li></ul></li></ul></li><li><p>两种持久化方式的对比</p><ul><li>占用存储空间：RDB存储的是压缩后的数据，AOF存储的是重写后的命令，占用的存储空间AOF较多</li><li>存储速度：RDB数据量小的时快，慢数据量变大将非常慢(每次都需要备份所有的数据)，AOF存储速度相对较快(每次只需要追加新的指令)</li><li>恢复速度：RDB直接复制结果数据，相对较快，AOF通过执行指令的方式恢复，相对较慢</li><li>数据安全性：RDB因存储的速度慢的原因，设置自动存储的时间间隔相对较长因此丢失的数据相对较多，AOF因存储速度相对快，时间间隔短，因此丢失的数据相对较少</li><li>资源消耗：RDB bgsave指令执行fork操作创建子进程过程消耗资源相对较多，AOF相对较少</li><li>兼容性：RDB 有可能出现各redis版本服务之间数据格式无法兼容现象，AOF则不存在</li><li>启动优先级：RDB优先级较低，AOF优先级较高</li></ul></li></ul><h3 id="redis的事务" tabindex="-1"><a class="header-anchor" href="#redis的事务" aria-hidden="true">#</a> redis的事务</h3><ul><li>开启事务 <ul><li>multi <ul><li>设定事务的开启位置，此指令执行后，后续的所有指令均加入到事务中</li></ul></li></ul></li><li>执行事务 <ul><li>exec <ul><li>设定事务的结束位置，同时执行事务，执行完事务之后销毁掉事务队列。与multi成对使用</li><li>注意：加入事务的命令暂时进入到任务队列中，并没有立即执行，只有执行exec命令才开始执行</li></ul></li></ul></li><li>取消事务 <ul><li>discard <ul><li>销毁掉事务队列，终止当前事务的定义，发生在multi之后，exec之前</li></ul></li></ul></li><li>事务锁 <ul><li>watch keyl [key2......] <ul><li>watch指令在multi指令之前，对key添加监视锁，在执行exec前如果key发生了变化，终止事务执行</li></ul></li><li>unwatch <ul><li>取消对所有key的监视</li></ul></li></ul></li><li>分布式事务 <ul><li>步骤： <ol><li>setnx lock-key value 使用setnx设置一个公共锁</li><li>pexpire lock-key milliseconds 使用 expire 为锁key添加时间限定，到时不释放，放弃锁(避免异常不释放锁)</li><li>del lock-key 释放锁</li></ol></li></ul></li></ul><h3 id="redis的主从复制" tabindex="-1"><a class="header-anchor" href="#redis的主从复制" aria-hidden="true">#</a> redis的主从复制</h3><ul><li><p>结构</p><ul><li>主机master:</li><li>写数据</li><li>执行写操作时，将出现变化的数据自动同步到slave</li><li>读数据（可忽略）</li><li>从机slave: <ul><li>读数据</li><li>写数据（禁止）</li></ul></li></ul></li><li><p>优点</p><ul><li>读写分离：master写、slave读，提高服务器的读写负载能力</li><li>负载均衡：基于主从结构，配合读写分离，由slave分担master负载，并根据需求的变化，改变slave的数量，通过多个从节点分担数据读取负载，大大提高Redis服务器并发量与数据吞吐量</li><li>故障恢复：当master出现问题时，由slave提供服务，实现快速的故障恢复</li><li>数据冗余：实现数据热备份，是持久化之外的一种数据冗余方式</li><li>高可用基石：基于主从复制，构建哨兵模式与集群，实现Redis的高可用方案</li></ul></li><li><p>主从复制的三个阶段</p><ul><li>建立连接阶段（即准备阶段） <ul><li>从机与主机建立连接的三种方式：执行完成后可在客户端使用info命令查看服务器的主从信息状态，建立连接的从机客户端可执行slaveof on one 使从机与主机断开连接 <ul><li>第一种 <ul><li>启动主机 <ul><li>服务端：./bin/redis-server --port 6382</li><li>客户端：./bin/redis-cli -p 6382</li></ul></li><li>启动从机 <ul><li>服务端：./bin/redis-server --port 6383</li><li>客户端：./bin/redis-cli -p 6383 <ul><li>发送连接命令 slaveof localhost 6382</li></ul></li></ul></li></ul></li><li>第二种 <ul><li>启动主机 <ul><li>服务端：./bin/redis-server --port 6382</li><li>客户端：./bin/redis-cli -p 6382</li></ul></li><li>启动从机 <ul><li>服务端：./bin/redis-server --port 6383 --slaveof localhost 6382</li><li>客户端：./bin/redis-cli -p 6383</li></ul></li></ul></li><li>第三种 <ul><li>启动主机 <ul><li>服务端：./bin/redis-server --port 6382</li><li>客户端：./bin/redis-cli -p 6382</li></ul></li><li>启动从机 <ul><li>服务端：./bin/redis-server --port 6383 <ul><li>配置文件书写 <ul><li>slaveof localhost 6382</li></ul></li></ul></li><li>客户端：./bin/redis-cli -p 6383</li></ul></li></ul></li></ul></li></ul></li><li>数据同步阶段 <ul><li>全量复制：master将所有数据通过生成RDB文件通过socket发送给slave</li><li>部分复制(增量复制)：在全量复制阶段可能存在master写入数据，此时写入的数据存在复制缓冲区，在执行为全量复制后，master需要将此部分数据也传输给slave</li></ul></li><li>命令传播阶段 <ul><li>通过心跳机制检查对方状态是否正常</li></ul></li></ul></li></ul><h3 id="redis的哨兵机制" tabindex="-1"><a class="header-anchor" href="#redis的哨兵机制" aria-hidden="true">#</a> redis的哨兵机制</h3><ul><li>定义：Sentinel（哨兵）是Redis 对于主从环境的一种高可用性解决方案，由一个或多个Sentinel实例组成的Sentinel 系统可以监视多个主服务器，以及这些主服务器属下的所有从服务器，并且当检测到主服务器宕机时，通过哨兵的投票机制自动将某个从服务器升级为新的主服务器，从而达到集群的正常运转</li><li>作用 <ul><li>监控 <ul><li>master存活检测、master与slave运行情况检测</li></ul></li><li>通知 <ul><li>当被监控的服务器出现问题时，向其他（哨兵间，客户端）发送通知。</li></ul></li><li>自动故障转移 <ul><li>当master宕机时，断开master与slave连接，选取一个slave作为master，将其他slave连接到新的master，并告知客户端新的服务器地址</li></ul></li></ul></li><li>sentinel主从切换 <ol><li>数量超过一半的sentinel检测到master宕机</li><li>内部所有的sentinel通过投票机制推选出一个处理主从从切换sentinel</li><li>该sentinel通过轮流与其他slave发送信息判断最适合作为master的slave</li></ol></li><li>哨兵 <ul><li>哨兵也是一台redis服务器，只是不提供数据服务</li><li>通常哨兵配置数量为单数</li></ul></li></ul><h3 id="缓存预热" tabindex="-1"><a class="header-anchor" href="#缓存预热" aria-hidden="true">#</a> 缓存预热</h3><ul><li>解释：缓存预热就是系统启动前，提前将相关频度较高的热点数据直接加载到缓存系统。避免在用户请求的时候，先查询数据库，然后再将数据缓存的问题！用户直接查询事先被预热的缓存数据！</li></ul><h3 id="缓存雪崩" tabindex="-1"><a class="header-anchor" href="#缓存雪崩" aria-hidden="true">#</a> 缓存雪崩</h3><ul><li>解释：缓存雪崩是指在同一时段大量的缓存key同时失效或者Redis服务宕机，导致大量请求到达数据库，带来巨大压力。</li><li>解决方式： <ul><li>key同时失效 <ul><li>将redis的删除策略由到期删除LRU改为命中次数删除LFU</li><li>给不同的Key的TTL添加随机值 <ul><li>eg：缓存预热批量导入key时添加指定的失效时间+随机时间</li></ul></li><li>将key的过期时间根据业务添加分类，将过期时间错峰</li><li>给业务添加多级缓存 <ul><li>eg：浏览器添加缓存，nginx缓存，jvm本地缓存</li></ul></li></ul></li><li>redis服务器宕机 <ul><li>利用Redis集群提高服务的可用性 <ul><li>eg：redis的使用主从的redis服务器群，添加哨兵机制</li></ul></li><li>给缓存业务添加降级限流策略 <ul><li>eg：快速失败拒绝服务</li></ul></li></ul></li></ul></li></ul><h3 id="缓存击穿" tabindex="-1"><a class="header-anchor" href="#缓存击穿" aria-hidden="true">#</a> 缓存击穿</h3><ul><li>解释： 缓存击穿就是某个高热数据缓存过期的瞬间，过期后的第一个该数据的请求会执行缓存重建的过程，与此同时重建完成前其他请求也发起了大量对该数据的数据库访问，导致对数据库服务器造成压力。</li><li>解决方式： <ul><li>预先设定，对近期访问可能量大的数据延长过期时间</li><li>监控访问量，对近期访问量大的数据延长过期时间</li><li>启动定时任务，在高峰期来临前刷新数据有效期</li><li>添加多级缓存，并设置不同的过期时间</li><li>加分布式锁，使得缓存重建过程只能有一个线程执行，其他线程在某线程缓存重建过程中等待 <ul><li>数据的一致性较好，但可能会出现死锁，性能较差</li></ul></li><li>使用逻辑过期，把key作为长期有效，单在key中加入一个过期字段，当过期时重建的线程会重新开启新的线程执行重建过程，此时的其他请求直接返回之前未更新的缓存 <ul><li>效能较好，缓存重建过程无需等待，实现相对复杂</li></ul></li></ul></li></ul><h3 id="缓存穿透" tabindex="-1"><a class="header-anchor" href="#缓存穿透" aria-hidden="true">#</a> 缓存穿透</h3><ul><li>解释：缓存穿透是指客户端请求的数据在缓存中和数据库中都不存在，数据库无法查出该请求的而结果所以就无法构建缓存，从而这些请求都会打到数据库。通常为黑客攻击服务器的手段。</li><li>解决方式： <ul><li>缓存空对象 <ul><li>缺点： <ul><li>有额外的内存消耗(可设置ttl缓解)</li><li>短期的数据不一致性，当该数据库添加该请求的结果到数据库，短期内缓存中的数据仍然为空(可通过新增数据后修改缓存解决)</li></ul></li></ul></li><li>布隆过滤 <ul><li>在执行redis查询之前添加布隆过滤器，该过滤器只将存在数据结果的请求放行，不存在数据结果的数据直接拒绝(布隆过滤器中存储的是数据库所有数据的二进制位) <ul><li>缺点：不一定百分百准确，且存在性能消耗</li></ul></li></ul></li></ul></li></ul>`,18),r=[d];function u(n,t){return i(),e("div",null,r)}const v=l(a,[["render",u],["__file","redis.html.vue"]]);export{v as default};
