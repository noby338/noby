const e=JSON.parse('{"key":"v-a8fb93de","path":"/codenotes/javase/day20%20%E6%AD%BB%E9%94%81%E3%80%81%E7%BA%BF%E7%A8%8B%E7%AD%89%E5%BE%85.html","title":"day20 死锁、线程等待","lang":"zh-CN","frontmatter":{"title":"day20 死锁、线程等待","icon":"write","category":["JavaSE"],"tag":["JavaSE"],"sticky":false,"star":false,"article":true,"timeline":true,"description":"死锁 定义：是指两个或两个以上的进程(线程)在执行过程中,因争夺资源而造成的一种互相等待的现象,若无外力作用,它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁,这些永远在互相等待的进程(线程)称为死锁进程(线程) 死锁解决方案： 1. 杀掉其中一个线程 2. 避免死锁发生 生产者消费者模式 供不应求：对于消费者无法及时得到自己想要的东西 供...","head":[["meta",{"property":"og:url","content":"https://noby.site/codenotes/javase/day20%20%E6%AD%BB%E9%94%81%E3%80%81%E7%BA%BF%E7%A8%8B%E7%AD%89%E5%BE%85.html"}],["meta",{"property":"og:site_name","content":"Noby"}],["meta",{"property":"og:title","content":"day20 死锁、线程等待"}],["meta",{"property":"og:description","content":"死锁 定义：是指两个或两个以上的进程(线程)在执行过程中,因争夺资源而造成的一种互相等待的现象,若无外力作用,它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁,这些永远在互相等待的进程(线程)称为死锁进程(线程) 死锁解决方案： 1. 杀掉其中一个线程 2. 避免死锁发生 生产者消费者模式 供不应求：对于消费者无法及时得到自己想要的东西 供..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"JavaSE"}]]},"excerpt":"","headers":[{"level":3,"title":"死锁","slug":"死锁","link":"#死锁","children":[]},{"level":3,"title":"生产者消费者模式","slug":"生产者消费者模式","link":"#生产者消费者模式","children":[]},{"level":2,"title":"等待唤醒机制","slug":"等待唤醒机制","link":"#等待唤醒机制","children":[{"level":3,"title":"唤醒机制","slug":"唤醒机制","link":"#唤醒机制","children":[]},{"level":3,"title":"面试题：","slug":"面试题","link":"#面试题","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":4,"words":1199},"filePathRelative":"codenotes/javase/day20 死锁、线程等待.md"}');export{e as data};
